#+TITLE: Emacs Configuration
#+AUTHOR: Johan Dahlkar
#+EMAIL: johan.dahlkar@gmail.com

* Personal Information
#+begin_src emacs-lisp
(setq user-full-name "Johan Dahlkar"
      user-mail-address "johan.dahlkar@gmail.com")
#+end_src

* Emacs Init
** Setup MELPA
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)
#+end_src
** Install =use-package=.
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package t))

  (eval-when-compile
    (require 'use-package))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

  (use-package use-package-ensure-system-package
    :ensure t)
#+end_src
** Variables
#+begin_src emacs-lisp
  (defvar savefile-dir (expand-file-name "savefile" user-emacs-directory))
#+end_src
* General Configuration
** Better Defaults
#+begin_src emacs-lisp
   (setq-default
    ad-redefinition-action 'accept         ; Silence warnings for redefinition
    auto-save-list-file-prefix nil         ; Prevent tracking for auto-saves
    cursor-in-non-selected-windows nil     ; Hide the cursor in inactive windows
    delete-by-moving-to-trash t            ; Delete files to trash
    fill-column 80                         ; Set width for automatic line breaks
    gc-cons-threshold (* 8 1024 1024)      ; Increase garbace collect threshold
    help-window-select t                   ; Focus new help windows when opened
    indent-tabs-mode nil                   ; Stop using tabs to indent
    inhibit-startup-screen t               ; Disable start-up screen
    initial-scratch-message ""             ; Empty the initial *scratch* buffer
    mouse-yank-at-point t                  ; Yank at point rather than pointer
    read-process-output-max (* 1024 1024)  ; Increase read size per process
    recenter-positions '(5 top bottom)     ; Set re-centering positions
    scroll-conservatively 101              ; Avoid recentering when scrolling far
    scroll-margin 2                        ; Add a margin when scrolling vertically
    scroll-preserve-screen-position 1
    select-enable-clipboard t              ; Merge system's and Emacs' clipboard
    sentence-end-double-space nil          ; Use a single space after dots
    show-help-function nil                 ; Disable help text everywhere
    tab-always-indent 'complete            ; Tab indents first then tries completions
    tab-width 4                            ; Smaller width for tab characters
    uniquify-buffer-name-style 'forward    ; Uniquify buffer names
    warning-minimum-level :error           ; Skip warning buffers
    window-combination-resize t            ; Resize windows proportionally
    x-stretch-cursor t                     ; Stretch cursor to the glyph width
    ring-bell-function 'ignore             ; Disable ring bell
    line-number-mode nil
    column-number-mode nil
    size-indication-mode nil
    mode-line-position nil
    )
   (blink-cursor-mode 0)                     ; Prefer a still cursor
   (delete-selection-mode 1)                 ; Replace region when inserting text
   (fset 'yes-or-no-p 'y-or-n-p)             ; Replace yes/no prompts with y/n
   (global-subword-mode 1)                   ; Iterate through CamelCase words
   (mouse-avoidance-mode 'exile)             ; Avoid collision of mouse with point
   (put 'downcase-region 'disabled nil)      ; Enable downcase-region
   (put 'upcase-region 'disabled nil)        ; Enable upcase-region
   (set-default-coding-systems 'utf-8)       ; Default to utf-8 encoding
   (global-linum-mode t)
   (global-hl-line-mode t)
   (setq backup-directory-alist
         `((".*" . ,temporary-file-directory)))
   (setq auto-save-file-name-transforms
         `((".*" ,temporary-file-directory t)))

   ;; autosave the undo-tree history
   (setq undo-tree-history-directory-alist
         `((".*" . ,temporary-file-directory)))
   (setq undo-tree-auto-save-history t)

   ;; revert buffers automatically when underlying files are changed externally
   (global-auto-revert-mode t)

  (let ((default-directory  "~/.emacs.d/lisp/"))
    (normal-top-level-add-subdirs-to-load-path))
   ;; key bindings
   (when (eq system-type 'darwin) ;; mac specific settings
     (setq mac-option-modifier 'meta)
     (setq mac-command-modifier 'control)
     (global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete
     )
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package nord-theme
    :config (load-theme 'nord t)
    :custom-face
    (trailing-whitespace ((t (:background "#BF616A"))))
    (whitespace-line ((t (:foreground "#B48EAD"))))
  )
#+end_src

** Global Keybindings

*** Font Size
#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

*** Hippe Expand
#+begin_src emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :diminish
    :config
    (global-flycheck-mode)
    (custom-set-variables
     '(flycheck-python-flake8-executable "python3.10")
     '(flycheck-python-pycompile-executable "python3.10")
     '(flycheck-python-pylint-executable "python3.10"))
    )
#+end_src

*** Open Emacs Config
Open this file with =C-c e c=
#+begin_src emacs-lisp
(defun my/open-config-file ()
  (interactive)
  (find-file "~/.emacs.d/emacs.org")
  (flycheck-mode -1)
  (end-of-buffer))

(global-set-key (kbd "C-c e c") 'my/open-config-file)
#+end_src

* Utility Functions
** Rename file
Change the name of the current file with =C-x r=
#+begin_src emacs-lisp
(defun my/rename-file (new-name)
  (interactive "FNew name: ")
  (let ((filename (buffer-file-name)))
    (if filename
        (progn
          (when (buffer-modified-p)
            (save-buffer))
          (rename-file filename new-name t)
          (kill-buffer (current-buffer))
          (find-file new-name)
          (message "Renamed '%s' -> '%s'" filename new-name))
      (message "Buffer '%s' isn't backed by a file!" (buffer-name)))))

(global-set-key "\C-xr" 'my/rename-file)
#+end_src
** Sudo open file
Open file as sudo.
#+begin_src emacs-lisp
(defun my/find-file-as-sudo ()
  (interactive)
  (let ((file-name (buffer-file-name)))
    (when file-name
      (find-alternate-file (concat "/sudo::" file-name)))))
#+end_src
** Wrap With
A wrapper function for smartparens.
#+begin_src emacs-lisp
  (defun my/wrap-with (s)
    `(lambda (&optional arg)
       (interactive "P")
       (sp-wrap-with-pair ,s)))
#+end_src
** Parse file for keybindings
This is a function that can be used to parse an org file for keybindings.
Useful if you want to use org files to create custom modes.


Keybindings are defined by keywords of type KEYMAP:VALUE and
install the corresponding key bindings in the mu4e-dashboard
minor mode keymap.  The previous keymap (if any) is erased.
VALUE is composed of \"keybinding | function-call\" with
keybidning begin a string describing a key sequence and a call to
an existing function. For example, to have 'q' to kill the
current buffer, the syntax would be:
=#+KEYMAP: q | kill-current-buffer=
This can be placed anywhere in the org file even though I advised
to group keymaps at the same place.

#+begin_src emacs-lisp
  (defun my/org-parse-keymap ()
    (local-set-key (kbd "<return>") #'org-open-at-point)

    (org-element-map (org-element-parse-buffer) 'keyword
      (lambda (keyword)
        (when (string= (org-element-property :key keyword) "KEYMAP")
          (let* ((value (org-element-property :value keyword))
                 (key   (string-trim (nth 0 (split-string value "|"))))
                 (call  (string-trim (nth 1 (split-string value "|")))))
            (local-set-key
             (kbd key)
             (eval (car (read-from-string
                         (format "(lambda () (interactive) (%s))" call)))))
            (message
             "org-parse-keymap: binding %s to %s"
             key
             (format "(lambda () (interactive) (%s))" call)))))))
#+end_src
* Packages
** Diminish
Diminish is used to hide minor modes in the modeline.
#+begin_src emacs-lisp
  (use-package diminish
    :config
    (diminish 'subword-mode)
    (diminish 'lisp-interaction-mode))
#+end_src
** Projectile
I use projectile to navigate between and in different projects.

#+begin_src emacs-lisp
  (use-package projectile
    :diminish
    :bind
    ("C-c v" . projectile-ag)
    ("C-c p" . projectile-command-map)
    :config
    (setq projectile-require-project-root nil)
    (setq projectile-project-search-path '("~/code/"))
    (setq projectile-cache-file (expand-file-name "projectile.cache" savefile-dir))
    (projectile-mode t)
  )
#+end_src

** Helm
#+begin_src emacs-lisp
  (use-package helm
    :diminish
    :ensure t
    :init
    (setq helm-split-window-in-side-p t
          helm-buffers-fuzzy-matching t
          helm-move-to-line-cycle-in-source t
    )
    :bind (("M-x" . helm-M-x)
           ("M-y" . helm-show-kill-ring)
           ("C-x b" . helm-mini)
           ("C-x C-f" . helm-find-files)
           ("C-x C-b" . helm-buffers-list))
  )
  (use-package helm-projectile
    :diminish
    :config
    (helm-projectile-on)
    (setq projectile-completion-system 'helm)
  )
#+end_src

** Org
*** Init
#+begin_src emacs-lisp
  (use-package org
    :diminish
    :config
    (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
    (setq org-log-done 'time)
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    (setq org-src-window-setup 'current-window)
    (setq org-log-done 'time)
    (setq org-agenda-span 14)
    (setq org-agenda-start-on-weekday nil)
    (setq org-file-apps
          '(("\\.docx\\'" . default)
            ("\\.mm\\'" . default)
            ("\\.x?html?\\'" . default)
            ("\\.pdf\\'" . "evince %s")
            (auto-mode . emacs)))

    (add-to-list 'org-structure-template-alist
                 '("el" . "src emacs-lisp\n"))

    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c b" . org-switchb)
           ("C-c c" . org-capture)))
#+end_src
*** Org management
All org files are stored in =~/org=, which i sync with Syncthing. And all todos are stored in =index.org=
and finished tasks are archived in =archive.org=.

#+begin_src emacs-lisp
  (setq org-directory "~/org")
  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (setq org-index-file (org-file-path "index.org"))
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))

  (setq org-refile-targets `((,org-index-file :level . 1)
                             (,(org-file-path "snippets.org") :level . 1)
                             (,(org-file-path "links.org") :level . 1)
                             (,(org-file-path "notes.org") :level . 1)
                             (,(org-file-path "meetings.org") :level . 1))
  )
#+end_src

TODO: Org agenda files
#+begin_src emacs-lisp
  (setq org-agenda-files (list org-index-file
                               (org-file-path "work-cal.org")
                               (org-file-path "personal-cal.org")
                               (org-file-path "habits.org")))
#+end_src

Hitting =C-c C-x C-s= will mark a task as done, move it to an appropriate place in the archive, and save all the Org buffers.
#+begin_src emacs-lisp
(defun me/mark-done-and-archive ()
  "Mark the state of an org-mode item as DONE and archive it."
  (interactive)
  (org-todo 'done)
  (org-archive-subtree))

(define-key org-mode-map (kbd "C-c C-x C-s") 'me/mark-done-and-archive)
#+end_src
*** Bullets
#+begin_src emacs-lisp
  (use-package org-superstar
    :diminish
    :hook ('org-mode . (lambda () (org-superstar-mode 1)))
  )
#+end_src
*** Org Habits
#+begin_src emacs-lisp
  (require 'org-habit)
  (setq org-habit-show-habits-only-for-today nil)
#+end_src
*** Capture templates
#+begin_src emacs-lisp
  (setq org-capture-templates
        `(("t" "Todo" entry
           (file ,(org-file-path "tasks.org"))
           "* TODO %?\nSCHEDULED: <%(org-read-date nil nil \"+14d\")>\n"
           :created t)

          ("m" "Meeting" entry
           (file ,(org-file-path "meetings.org"))
           "* %t %? \n")

          ("l" "Links" entry
           (file+headline ,(org-file-path "links.org") "Links")
           "* %t %? \n")

          ("n" "Notes" entry
           (file+headline ,(org-file-path "notes.org") "Notes")
           "* %t %? \n")

          ("r" "Recept" entry
           (file ,(org-file-path "recept.org"))
           "* %? \n** Inköpslista\n+[ ] \n** Recept\n")

          ("h" "Habit" entry
           (file+headline ,(org-file-path "habits.org") "Habits")
           "* TODO %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:END:\n")

          ("p" "Python Snippet" entry
           (file+headline ,(org-file-path "snippets.org") "Python Snippet")
           "* %?\n#+BEGIN_SRC python\n\n#+END_SRC")
          )
  )
#+end_src

*** Extra Keybindings
Open the index file with =C-c i=
#+begin_src emacs-lisp
(defun my/open-index-file ()
  "Open the master org TODO list."
  (interactive)
  (find-file org-index-file)
  (flycheck-mode -1)
  (end-of-buffer))

(global-set-key (kbd "C-c i") 'my/open-index-file)
#+end_src

** Wind Move
This is a package that enables moving between open windows in emacs.
#+begin_src emacs-lisp
  (use-package windmove
    :diminish
    :bind (("M-j" . windmove-left)
           ("M-l" . windmove-right)
           ("M-k" . windmove-down)
           ("M-i" . windmove-up))
  )
#+end_src
** Magit
I use Magit as my git client. It is awesome.
#+begin_src emacs-lisp
  (use-package magit
    :diminish)
#+end_src
** Diff Highlight
This package highligts diffs in a file compared to what is commited to git.
#+begin_src emacs-lisp
  (use-package diff-hl
    :diminish
    :hook ((dired-mode . diff-hl-dired-mode)
           (magit-post-refresh . diff-hl-magit-post-refresh))
    :config (global-diff-hl-mode +1)
  )
#+end_src

** Easy Kill
Improved mark and kill things.
#+begin_src emacs-lisp
  (use-package easy-kill
    :diminish
    :bind (([remap kill-ring-save] . easy-kill)
           ([remap mark-sexp] . easy-mark))
  )
#+end_src

** Smartparens
Use smart parens to handle pairs, e.g. =<% %>=.
#+begin_src emacs-lisp
  (use-package smartparens
    :diminish
    :custom
    (sp-base-key-bindings 'paredit)
    (sp-autoskip-closing-pair 'always)
    (sp-hybrid-kill-entire-symbol nil)
    :config
    (sp-use-paredit-bindings)
    (show-smartparens-global-mode +1)
    (smartparens-global-mode +1)

    (define-key prog-mode-map (kbd "M-\"") (my/wrap-with "\""))
    (define-key prog-mode-map (kbd "M-'") (my/wrap-with "'"))
    (define-key smartparens-mode-map (kbd "M-j") nil)
  )
#+end_src

** Hl todo
Highlight TODO in source code.
#+begin_src emacs-lisp
  (use-package hl-todo
    :diminish
    :config (global-hl-todo-mode 1)
  )
#+end_src

** Whitespace
Shows whitespace in editor.
#+begin_src emacs-lisp
  (use-package whitespace
    :diminish
    :custom
    (whitespace-line-column 120)
    (whitespace-style '(face tabs empty trailing lines-tail))
    :config
    (add-hook 'before-save-hook 'delete-trailing-whitespace))

  (defun my/enable-whitespace ()
    (whitespace-mode +1))

  (add-hook 'text-mode-hook 'my/enable-whitespace)
  (add-hook 'prog-mode-hook 'my/enable-whitespace)
#+end_src

** Undo Tree
A super nice package that display a undo tree which you can traverse forward and backwards.
#+begin_src emacs-lisp
  (use-package undo-tree
    :diminish
    :custom
    (undo-tree-history-directory-alist `((".*" . ,temporary-file-directory)))
    (undo-tree-auto-save-history t)
    :config
    (global-undo-tree-mode)
  )
#+end_src

** Rainbow Mode
Sets the background color of strings that match color names, e.g. #0000ff
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :diminish
    :hook (css-mode scss-mode)
  )
#+end_src

** Crux
Crux adds some usefull extensions that is alos included in prelude.
And I am to used to them.
#+begin_src emacs-lisp
    (use-package crux
      :diminish
      :bind (("C-a" . crux-move-beginning-of-line)
             ("C-<return>" . crux-smart-open-line)
             ("C-S-<return>" . crux-smart-open-line-above)
             ("C-<backspace>" . crux-kill-line-backwards))
      :config
      (crux-with-region-or-line kill-region))
#+end_src

** Move Text
Move text moves the current line, or region.
#+begin_src emacs-lisp
  (use-package move-text
    :diminish
    :bind (("C-S-p" . move-text-up)
           ("C-S-n" . move-text-down)))
#+end_src

** Browse Kill Ring
Lets me navigate throug my kill ring.
#+begin_src emacs-lisp
  (use-package browse-kill-ring
    :diminish
    :config
    (browse-kill-ring-default-keybindings))
#+end_src

** EditorConfig
A [[https://editorconfig.org][EditorConfig]] plugin. I want it globally enabled.
#+begin_src emacs-lisp
  (use-package editorconfig
    :diminish
    :config
    (editorconfig-mode 1))
#+end_src

** SuperSave
Autosaves files when idle.
#+begin_src emacs-lisp
  (use-package super-save
    :diminish
    :config
    (super-save-mode +1))
#+end_src

** Auto Dim Other Buffers
This package dims the unselected buffers.
#+begin_src emacs-lisp
  (use-package auto-dim-other-buffers
    :diminish
    :hook (after-init . (lambda () (auto-dim-other-buffers-mode t)))
    :custom-face
    (auto-dim-other-buffers-face ((t (:background "#3B4252")))))
#+end_src

** Perspective Mode
   Is used to create and manage emacs workspaces.
#+begin_src emacs-lisp
  (define-key input-decode-map
      (kbd "C-[")
      [control-bracketleft])
  (use-package perspective
    :bind (([control-bracketleft] . persp-prev)
           ("C-]" . persp-next))
    :custom
    (persp-mode-prefix-key (kbd "C-z"))
    :config
    (persp-mode))
  (require 'persp-projectile)
#+end_src
** Company Mode
#+begin_src emacs-lisp
  (use-package company
    :diminish
    :config
    (setq company-show-numbers t)
    (setq company-tooltip-limit 10)
    (setq company-minimum-prefix-length 2)
    (setq company-format-margin-function nil)
    (setq company-tooltip-flip-when-above t)
    (global-company-mode 1))
#+end_src
* Programming
** Base
#+begin_src emacs-lisp
;'  (define-key prog-mode-map (kbd "M-\"") (my/wrap-with "\""))
  (define-key prog-mode-map (kbd "M-(") (my/wrap-with "("))
  (define-key prog-mode-map (kbd "M-[") (my/wrap-with "["))
#+end_src
*** Which function
Shows the name of the current function definition in the modeline.
#+begin_src emacs-lisp
  (use-package which-func
    :diminish
    :config (which-function-mode 1)
  )
#+end_src
*** LSP
Install a lsp client mode.
#+begin_src emacs-lisp
(use-package lsp-mode)
(use-package lsp-ui
  :init (setq lsp-ui-sideline-enable t)
        (setq lsp-ui-doc-enable t)
        (setq lsp-ui-peek-enable t)
        (setq lsp-ui-peek-always-show t)
)
#+end_src
** Python
*** Anaconda Mode
#+begin_src emacs-lisp
(use-package anaconda-mode
  :diminish
  :hook python-mode
)
#+end_src
** Lisp
#+begin_src emacs-lisp
  (defun my/lisp-coding-defaults ()
    (smartparens-strict-mode +1)
    (rainbow-delimiters-mode +1))

  (setq my/lisp-coding-hook 'my/lisp-coding-defaults)
#+end_src
*** Common Lisp
#+begin_src emacs-lisp
(add-hook 'lisp-mode-hook (lambda () (run-hooks 'my/lisp-coding-defaults)))
#+end_src

*** Emacs Lisp
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook (lambda () (run-hooks 'my/lisp-coding-defaults)))
#+end_src

** JavaScript
*** Web Mode
A mode for editing html templates. All html files should use web-mode.

And disable auto pairing to better work with smartparens.
#+begin_src emacs-lisp
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    (setq-default flycheck-temp-prefix ".flycheck")
    ;; adjust indents for web-mode to 2 spaces
    ;; use local eslint from node_modules before global
    ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
    (defun my/use-eslint-from-node-modules ()
      (let* ((root (locate-dominating-file
                    (or (buffer-file-name) default-directory)
                    "node_modules"))
             (eslint (and root
                          (expand-file-name "node_modules/eslint/bin/eslint.js"
                                            root))))
        (when (and eslint (file-executable-p eslint))
          (setq-local flycheck-javascript-eslint-executable eslint))))
    (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
    (defun my-web-mode-hook ()
      "Hooks for Web mode. Adjust indents"
  ;;; http://web-mode.org/
      (setq web-mode-markup-indent-offset 2)
      (setq web-mode-css-indent-offset 2)
      (setq web-mode-code-indent-offset 2))
    (add-hook 'web-mode-hook  'my-web-mode-hook)
    ;; for better jsx syntax-highlighting in web-mode
    ;; - courtesy of Patrick @halbtuerke
    (defadvice web-mode-highlight-part (around tweak-jsx activate)
      (if (equal web-mode-content-type "jsx")
          (let ((web-mode-enable-part-face nil))
            ad-do-it)
        ad-do-it))
    )
#+end_src
*** JSON mode
#+begin_src emacs-lisp
  (use-package json-mode
    :diminish)
#+end_src
** Rust
If these steps fail you may need to install
 + rustrc (compiler)
 + cargo (package manager)
 + racer (completion tool)
 + rustfmt (formatting tool)
 + rls (language server)
*** Rust mode
#+begin_src emacs-lisp
  (use-package rust-mode
    :diminish
    :ensure-system-package (
      (rustup . "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh")
      (rustfmt . "rustup component add rustfmt")
    )
  )
#+end_src
*** Cargo
#+begin_src emacs-lisp
  (use-package cargo
    :diminish
    :hook (rust-mode . cargo-minor-mode))
#+end_src
*** Smartparens
Add custom smartparens pairs.
#+begin_src emacs-lisp
(sp-with-modes '(web-mode)
  (sp-local-pair "%" "%"
                 :unless '(sp-in-string-p)
                 :post-handlers '(((lambda (&rest _ignored)
                                     (just-one-space)
                                     (save-excursion (insert " ")))
                                   "SPC" "=" "#")))
  (sp-local-tag "%" "<% "  " %>")
  (sp-local-tag "=" "<%= " " %>")
  (sp-local-tag "#" "<%# " " %>"))
#+end_src
** CSS/SCSS
*** CSS
Set indent of css to 2 spaces
#+begin_src emacs-lisp
(setq css-indent-offset 2)
#+end_src

*** SCSS Mode
#+begin_src emacs-lisp
  (use-package scss-mode
    :diminish
    :custom
    (scss-compile-at-save nil))
#+end_src

** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :diminish)
#+end_src
*** Gitlab Ci
#+begin_src emacs-lisp
  (use-package gitlab-ci-mode
    :diminish)
#+end_src
** HCL
#+begin_src emacs-lisp
  (use-package hcl-mode
    :diminish
    :mode (("\\.tf\\'" . hcl-mode)
           ("\\.tfvars\\'" . hcl-mode)))
#+end_src

** Docker
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :diminish
    :config
    (add-to-list 'auto-mode-alist '("\\.Dockerfile\\'" . dockerfile-mode)))
#+end_src
* Custom
** Commit MSG
#+begin_src emacs-lisp
(defun my-git-commit-setup ()
  (insert "Title \nUser-Story: DG-\nTask: DG-"))

(add-hook 'git-commit-setup-hook 'my-git-commit-setup)
#+end_src
